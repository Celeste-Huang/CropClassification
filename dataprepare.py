# -*- coding: utf-8 -*-
"""dataPrepare.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IPZlDyfs2uZF5d7KLXP4SeWw4bpXXG6J
"""

from google.colab import drive
drive.mount('/content/drive')

! pip install rasterio

import rasterio
import numpy as np
import gdal
import pandas as pd
import operator
import gc
import os
from osgeo import gdal_array
import matplotlib.pyplot as plt

"""gdalwarp function in QGIS to transfer the two raster images (i.e., CDL.tif and RapidEye.tif) into the same projections. In the following, out_cdl.tif has the same resolution (9210 * 11652) with RapidEye.tif . """

metadata = os.popen('gdalinfo -mm ./drive/MyDrive/App/data/RapidEye.tif').read()
print(metadata)

cdl_ds = rasterio.open('./drive/MyDrive/App/data/out_cdl.tif')
cdl=cdl_ds.read(1)
train_ds = rasterio.open('/content/drive/MyDrive/App/data/RapidEye.tif')
img_train = train_ds.read() #img_train.shape is (5, 11652, 9210)
print(cdl.shape, img_train.shape)

# Display RapidEye satellite and CDL images
plt.subplot(121)
plt.imshow(img_train[1,:,:])
plt.title('RapidEye Satellite Image')

plt.subplot(122)
plt.imshow(cdl)#, cmap=plt.cm.Spectral)
plt.title('CDL Image')

plt.show()

classes = np.unique(cdl)
dict = {}
# how many pixels for each class?
for c in classes:
    dict[c] = (cdl == c).sum()
sorted_x = sorted(dict.items(), key=operator.itemgetter(1))
print("Top 10 classes and pixel counts \n",sorted_x[-10:])

class_3=[124, 24, 123, 141, 0, 176, 121, 122]
top_classes = [5,1]

final = pd.DataFrame()
for c in class_3:
  Xt = img_train[:,cdl==c] 
  Xt1 = pd.DataFrame(Xt.T)
  Xt1["class"] = 3 
  final = pd.concat([Xt1,final],axis=0)
  final.reset_index(drop=True,inplace=True)

print('We have {n} samples for class 3, select 20,000,000'.format(n=final.shape[0]))
final = final.sample(n=20000000)
final.reset_index(drop=True,inplace=True)

for c in top_classes:
  Xt = img_train[:,cdl==c] 
  print('We have {n} samples for class {c}, select 20,000,000'.format(n=Xt.shape[1],
                                                   c=c))
  Xt1 = pd.DataFrame(Xt.T)
  Xt2 = Xt1.sample(n=20000000)
  Xt2.reset_index(drop=True,inplace=True)
  Xt2["class"] = c 
  final = pd.concat([Xt2,final],axis=0)
  final.reset_index(drop=True,inplace=True)

### Calculate Vegetation Index from the 5 bands
### NDVI = (NIR-R)/(NIR+R)
#ndvi = (final.loc[:,final.columns[4]] - final.loc[:,final.columns[2]]) / (final.loc[:,final.columns[4]] + final.loc[:,final.columns[2]])
#final['NDVI'] = ndvi
### SAVI = 1.5*(NIR-R)/(NIR+R+0.5)
#savi = 1.5*(final.loc[:,final.columns[4]] - final.loc[:,final.columns[2]]) / (final.loc[:,final.columns[4]] + final.loc[:,final.columns[2]]+0.5)
#final['SAVI'] = savi
### RECI : NIR/R-1
#reci = final.loc[:,final.columns[4]] / final.loc[:,final.columns[2]] - 1
#final['RECI'] = reci
### NDRE = (NIR – RED EDGE) / (NIR + RED EDGE)
#ndre = (final.loc[:,final.columns[4]] - final.loc[:,final.columns[3]]) / (final.loc[:,final.columns[4]] + final.loc[:,final.columns[3]])
#final['NDRE'] = ndre
### GNDVI = (NIR – GREEN) / (NIR + GREEN)
#gndvi = (final.loc[:,final.columns[4]] - final.loc[:,final.columns[1]]) / (final.loc[:,final.columns[4]] + final.loc[:,final.columns[1]])
#final['NDRE'] = gndvi
### NDWI = (GREEN – NIR) / (GREEN + NIR)
#ndwi = (final.loc[:,final.columns[1]] - final.loc[:,final.columns[4]]) / (final.loc[:,final.columns[1]] + final.loc[:,final.columns[4]])
#final['NDWI'] = ndwi
### EVI = 2.5 * ((NIR – RED) / ((NIR) + (6 * RED) – (7.5 * BLUE) + 1))
#evi = 2.5 * (final.loc[:,final.columns[4]] - final.loc[:,final.columns[2]]) / (final.loc[:,final.columns[4]] + 6 * final.loc[:,final.columns[2]] - 7.5 * final.loc[:,final.columns[0]] + 1)
#final['EVI'] = evi
### ARVI = (NIR – (2 * RED) + BLUE) / (NIR + (2 * RED) + BLUE)
#avri = (final.loc[:,final.columns[4]] - (2 * final.loc[:,final.columns[2]]) + final.loc[:,final.columns[0]]) / (final.loc[:,final.columns[4]] + (2 * final.loc[:,final.columns[2]]) + final.loc[:,final.columns[0]])
#final['AVRI'] = avri
### VARI = (GREEN – RED) / (GREEN + RED – BLUE)
#vari = (final.loc[:,final.columns[1]] - final.loc[:,final.columns[2]]) / (final.loc[:,final.columns[1]] + final.loc[:,final.columns[2]] - final.loc[:,final.columns[0]])
#final['VARI'] = vari
### SIPI = (NIR – BLUE) / (NIR – RED)
#sipi = (final.loc[:,final.columns[4]] - final.loc[:,final.columns[0]]) / (final.loc[:,final.columns[4]] - final.loc[:,final.columns[2]])
#final['SIPI'] = sipi
### GCI = NIR / GREEN – 1
#gci = final.loc[:,final.columns[4]] / final.loc[:,final.columns[1]] - 1
#final['GCI'] = gci

final

final.columns = ['col_'+str(i) for i in range(6)]
final.to_csv("/content/drive/MyDrive/App/data/final.csv",index=False)